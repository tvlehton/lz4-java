// Auto-generated: DO NOT EDIT

package net.jpountz.lz4;

import static net.jpountz.lz4.LZ4Constants.*;
@if{ type == "Unsafe" }
import static net.jpountz.lz4.LZ4UnsafeUtils@{TypeSuffix}.*;
import static net.jpountz.util.UnsafeUtils@{TypeSuffix}.*;
import static net.jpountz.util.Utils.checkRange;
import static net.jpountz.util.ByteBufferUtils.checkRange;
import static net.jpountz.util.ByteBufferUtils.checkNotReadOnly;
@else{}
import static net.jpountz.lz4.LZ4Utils.*;
import static net.jpountz.util.Utils.*;
import static net.jpountz.lz4.LZ4ByteBufferUtils.*;
import static net.jpountz.util.ByteBufferUtils.*;
@end{}

import java.nio.ByteBuffer;

/**
 * Decompressor.
 */
final class LZ4Java@{type}@{TypeSuffix}${size}Decompressor extends LZ4${size}Decompressor {

  public static final LZ4${size}Decompressor INSTANCE = new LZ4Java${type}@{TypeSuffix}${size}Decompressor();

@include{"decompress.template"; prefix = false; Storage = "byte[]"; OffsetType = AddressType; NameSuffix = "Unchecked"; Visibility = "private"}
@include{"adapters.template"; OffsetType = AddressType; Method = "decompress"; WithSrcLen = size == "Safe" }

}

