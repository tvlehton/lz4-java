package net.jpountz.lz4;

/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import static net.jpountz.lz4.LZ4Constants.COPY_LENGTH;
import static net.jpountz.lz4.LZ4Constants.LAST_LITERALS;
import static net.jpountz.lz4.LZ4Constants.ML_BITS;
import static net.jpountz.lz4.LZ4Constants.ML_MASK;
import static net.jpountz.lz4.LZ4Constants.RUN_MASK;
import static net.jpountz.util.@{Kind}Utils@{TypeSuffix}.readByte;
import static net.jpountz.util.@{Kind}Utils@{TypeSuffix}.readInt;
import static net.jpountz.util.@{Kind}Utils@{TypeSuffix}.readLong;
import static net.jpountz.util.@{Kind}Utils@{TypeSuffix}.readShort;
import static net.jpountz.util.@{Kind}Utils@{TypeSuffix}.writeByte;
import static net.jpountz.util.@{Kind}Utils@{TypeSuffix}.writeInt;
import static net.jpountz.util.@{Kind}Utils@{TypeSuffix}.writeLong;
import static net.jpountz.util.@{Kind}Utils@{TypeSuffix}.writeShort;
@if{Kind == "Unsafe"}
import static net.jpountz.util.Utils.NATIVE_BYTE_ORDER;
@else{}
import java.nio.ByteBuffer;
@end{}

import java.nio.ByteOrder;

enum LZ4@{Kind}Utils@{TypeSuffix} {
  ;

  static void safeArraycopy(@{Storage} src, @{OffsetType} srcOff, @{Storage} dest, @{OffsetType} destOff, int len) {
    final int fastLen = len & 0xFFFFFFF8;
    wildArraycopy(src, srcOff, dest, destOff, fastLen);
    for (int i = 0, slowLen = len & 0x7; i < slowLen; i += 1) {
      writeByte(dest, destOff + fastLen + i, readByte(src, srcOff + fastLen + i));
    }
  }

  static void wildArraycopy(@{Storage} src, @{OffsetType} srcOff, @{Storage} dest, @{OffsetType} destOff, int len) {
    for (int i = 0; i < len; i += 8) {
      writeLong(dest, destOff + i, readLong(src, srcOff + i));
    }
  }

  static void wildIncrementalCopy(@{Storage} dest, @{OffsetType} matchOff, @{OffsetType} dOff, @{OffsetType} matchCopyEnd) {
    if (dOff - matchOff < 4) {
      for (int i = 0; i < 4; ++i) {
        writeByte(dest, dOff+i, readByte(dest, matchOff+i));
      }
      dOff += 4;
      matchOff += 4;
      int dec = 0;
      assert dOff >= matchOff && dOff - matchOff < 8;
      switch ((int)(dOff - matchOff)) {
      case 1:
        matchOff -= 3;
        break;
      case 2:
        matchOff -= 2;
        break;
      case 3:
        matchOff -= 3;
        dec = -1;
        break;
      case 5:
        dec = 1;
        break;
      case 6:
        dec = 2;
        break;
      case 7:
        dec = 3;
        break;
      default:
        break;
      }
      writeInt(dest, dOff, readInt(dest, matchOff));
      dOff += 4;
      matchOff -= dec;
    } else if (dOff - matchOff < COPY_LENGTH) {
      writeLong(dest, dOff, readLong(dest, matchOff));
      dOff += dOff - matchOff;
    }
    while (dOff < matchCopyEnd) {
      writeLong(dest, dOff, readLong(dest, matchOff));
      dOff += 8;
      matchOff += 8;
    }
  }

  static void safeIncrementalCopy(@{Storage} dest, @{OffsetType} matchOff, @{OffsetType} dOff, int matchLen) {
    for (int i = 0; i < matchLen; ++i) {
      writeByte(dest, dOff + i, readByte(dest, matchOff + i));
    }
  }

  static int readShortLittleEndian(@{Storage} buf, @{OffsetType} srcOff) {
    short s = readShort(buf, srcOff);
    if (@{Order} == ByteOrder.BIG_ENDIAN) {
      s = Short.reverseBytes(s);
    }
    return s & 0xFFFF;
  }

  static void writeShortLittleEndian(@{Storage} buf, @{OffsetType} destOff, @{OffsetType} value) {
    short s = (short) value;
    if (@{Order} == ByteOrder.BIG_ENDIAN) {
      s = Short.reverseBytes(s);
    }
    writeShort(buf, destOff, s);
  }

  static boolean readIntEquals(@{Storage} src, @{OffsetType} ref, @{OffsetType} sOff) {
    return readInt(src, ref) == readInt(src, sOff);
  }

  static int commonBytes(@{Storage} buf, @{OffsetType} ref, @{OffsetType} sOff, @{OffsetType} srcLimit) {
    int matchLen = 0;
    while (sOff <= srcLimit - 8) {
      if (readLong(buf, sOff) == readLong(buf, ref)) {
        matchLen += 8;
        ref += 8;
        sOff += 8;
      } else {
        final int zeroBits;
        if (@{Order} == ByteOrder.BIG_ENDIAN) {
          zeroBits = Long.numberOfLeadingZeros(readLong(buf, sOff) ^ readLong(buf, ref));
        } else {
          zeroBits = Long.numberOfTrailingZeros(readLong(buf, sOff) ^ readLong(buf, ref));
        }
        return matchLen + (zeroBits >>> 3);
      }
    }
    while (sOff < srcLimit && readByte(buf, ref++) == readByte(buf, sOff++)) {
      ++matchLen;
    }
    return matchLen;
  }

  static @{OffsetType} lastLiterals(@{Storage} src, @{OffsetType} sOff, int srcLen, @{Storage} dest, @{OffsetType} dOff, @{OffsetType} destEnd) {
    final int runLen = srcLen;

    if (dOff + runLen + 1 + (runLen + 255 - RUN_MASK) / 255 > destEnd) {
      throw new LZ4Exception();
    }

    if (runLen >= RUN_MASK) {
      writeByte(dest, dOff++, (byte) (RUN_MASK << ML_BITS));
      dOff = writeLen(runLen - RUN_MASK, dest, dOff);
    } else {
      writeByte(dest, dOff++, (byte) (runLen << ML_BITS));
    }
    // copy literals
    safeArraycopy(src, sOff, dest, dOff, runLen);
    dOff += runLen;

    return dOff;
  }

  static @{OffsetType} writeLen(int len, @{Storage} dest, @{OffsetType} dOff) {
    while (len >= 0xFF) {
      writeByte(dest, dOff++, 0xFF);
      len -= 0xFF;
    }
    writeByte(dest, dOff++, len);
    return dOff;
  }

  static @{OffsetType} encodeSequence(@{Storage} src, @{OffsetType} anchor, @{OffsetType} matchOff, @{OffsetType} matchRef, int matchLen, @{Storage} dest, @{OffsetType} dOff, @{OffsetType} destEnd) {
    final int runLen = (int)(matchOff - anchor);
    final @{OffsetType} tokenOff = dOff++;
    int token;

    if (runLen >= RUN_MASK) {
      token = (byte) (RUN_MASK << ML_BITS);
      dOff = writeLen(runLen - RUN_MASK, dest, dOff);
    } else {
      token = runLen << ML_BITS;
    }

    // copy literals
    wildArraycopy(src, anchor, dest, dOff, runLen);
    dOff += runLen;

    // encode offset
    final int matchDec = (int)(matchOff - matchRef);
    writeByte(dest, dOff++, (byte) matchDec);
    writeByte(dest, dOff++, (byte) (matchDec >>> 8));

    // encode match len
    matchLen -= 4;
    if (dOff + (1 + LAST_LITERALS) + (matchLen >>> 8) > destEnd) {
      throw new LZ4Exception("maxDestLen is too small");
    }
    if (matchLen >= ML_MASK) {
      token |= ML_MASK;
      dOff = writeLen(matchLen - RUN_MASK, dest, dOff);
    } else {
      token |= matchLen;
    }

    writeByte(dest, tokenOff, (byte) token);

    return dOff;
  }

  static int commonBytesBackward(@{Storage} b, @{OffsetType} o1, @{OffsetType} o2, @{OffsetType} l1, @{OffsetType} l2) {
    int count = 0;
    while (o1 > l1 && o2 > l2 && readByte(b, --o1) == readByte(b, --o2)) {
      ++count;
    }
    return count;
  }

}
