  @{Visibility} int decompress@{NameSuffix}(
      @{Storage} src, @{OffsetType} srcOff,@if{ size == "Safe" } int srcLen,@end{}
      @{Storage} dest, @{OffsetType} destOff, int destLen) {

@if{ size == "Safe" }
    if (destLen == 0) {
      if (srcLen != 1 || readByte(src, srcOff) != 0) {
        throw new LZ4Exception("Output buffer too small");
      }
      return 0;
    }

    final @{OffsetType} srcEnd = srcOff + srcLen;
@else{}
    if (destLen == 0) {
      if (readByte(src, srcOff) != 0) {
        throw new LZ4Exception("Malformed input at " + srcOff);
      }
      return 1;
    }
@end{}

@if{Storage == "ByteBuffer"}
    src = inNativeOrder(src);
    dest = inNativeOrder(dest);
@end{}

    final @{OffsetType} destEnd = destOff + destLen;

    @{OffsetType} sOff = srcOff;
    @{OffsetType} dOff = destOff;

    while (true) {
      final int token = readByte(src, sOff) & 0xFF;
      ++sOff;

      // literals
      int literalLen = token >>> ML_BITS;
      if (literalLen == RUN_MASK) {
        byte len = (byte) 0xFF;
        while (@if{ size == "Safe" }sOff < srcEnd &&@end{}(len = readByte(src, sOff++)) == (byte) 0xFF) {
          literalLen += 0xFF;
        }
        literalLen += len & 0xFF;
      }

      final @{OffsetType} literalCopyEnd = dOff + literalLen;
@if{ size == "Fast" }
      if (literalCopyEnd > destEnd - COPY_LENGTH) {
        if (literalCopyEnd != destEnd) {
          throw new LZ4Exception("Malformed input at " + sOff);
@else{}
      if (literalCopyEnd > destEnd - COPY_LENGTH || sOff + literalLen > srcEnd - COPY_LENGTH) {
        if (literalCopyEnd > destEnd) {
          throw new LZ4Exception();
        } else if (sOff + literalLen != srcEnd) {
          throw new LZ4Exception("Malformed input at " + sOff);
@end{}
        } else {
          safeArraycopy(src, sOff, dest, dOff, literalLen);
          sOff += literalLen;
          dOff = literalCopyEnd;
          break; // EOF
        }
      }

      wildArraycopy(src, sOff, dest, dOff, literalLen);
      sOff += literalLen;
      dOff = literalCopyEnd;

      // matchs
      final int matchDec = readShortLittleEndian(src, sOff);
      sOff += 2;
      @{OffsetType} matchOff = dOff - matchDec;

@if{ !prefix }
      if (matchOff < destOff) {
        throw new LZ4Exception("Malformed input at " + sOff);
      }
@end{}

      int matchLen = token & ML_MASK;
      if (matchLen == ML_MASK) {
        byte len = (byte) 0xFF;
        while (@if{ size == "Safe" }sOff < srcEnd &&@end{}(len = readByte(src, sOff++)) == (byte) 0xFF) {
          matchLen += 0xFF;
        }
        matchLen += len & 0xFF;
      }
      matchLen += MIN_MATCH;

      final @{OffsetType} matchCopyEnd = dOff + matchLen;

      if (matchCopyEnd > destEnd - COPY_LENGTH) {
        if (matchCopyEnd > destEnd) {
          throw new LZ4Exception("Malformed input at " + sOff);
        }
        safeIncrementalCopy(dest, matchOff, dOff, matchLen);
      } else {
        wildIncrementalCopy(dest, matchOff, dOff, matchCopyEnd);
      }
      dOff = matchCopyEnd;
    }

@if{ size == "Fast" }
    return (int) (sOff - srcOff);
@else{}
    return (int) (dOff - destOff);
@end{}
  }
